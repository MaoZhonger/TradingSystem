
2. use caching or remove CSV functions in DataAPI
3. fix ugly workaround in trade api for different base url
4. see if you can factorise wrapper classes
5. Encapsulation

6. Add variable amount of fundamental data types (add to success criteria) (add to settings)

6. DO ENTIRE GUI
6. Make GUI modular (OOP) (Fix nasty pre-populated form)
7. Add performance tracking
8. Add charts
6. store login info as hashes and add sign up page
6. add account page

8. Test trading (closing positions and opening positions)
9. deploy on server

------
Changes to make to code:
Tasks:

- store login info as hashes

UI:
- table class: either improve it or put into tools.php
- maybe graph in dashboard


TradeBot:
- IMPORTANT: issue with closing positions not in universe when adheres to filter is true
- make all functions resistant to null or empty fields

-getSelections
TEST NEW FUNCTION (unit test)

- liquidatePosition
TEST NEW FUNCTION (unit test)

-closePosition
TEST NEW FUNCTION (unit test)

TradingAPI:
- getPrices
fix ugly workaround for different base URL

General:

- support shorting
- support leverage
- support multiple robots sharing one account

- add weighting in proportion to final score
- add take-profit in proportion
- create httprequest class to factorise the two api classes
- make api classes static classes since only one are needed
- encapsulation of classes (private variables)

------------
Multi-factor ranking:
-different methods

1. magic formula method
sort by each attribute, assign scores to each in order, then find final score for
each item by summing its corresponding scores from each attributes sorted list.
Finally, sort by the final score to find to get ranked list.

2. normalised weighted sum
Find the min and max for each attribute's column. To calculte final score of item,
take each attribute of it (each field in column) and apply min-max feature scaling.
Then is descending do (1-value) to get reverse score.
Finaly take the weighted sum of all normalised attributes and that is the final score.
Lastly, sort by the fianl score




